The MIN() function returns the smallest value of the selected column.

The MAX() function returns the largest value of the selected column.


lets know about syntax


Min()
SELECT MIN(column_name)
FROM table_name
WHERE condition

Max()

SELECT MAX(column_name)
FROM table_name
WHERE condition;   



here we can find max to min  according to table name .


Demo example :Min()
 
SELECT MIN(Price) AS SmallestPrice
FROM Products;



SELECT MAX(Price) AS LargestPrice
FROM Products;




2)SQL COUNT(), AVG() and SUM() Functions:



The COUNT() function returns the number of rows that matches a specified criterion.

COUNT() Syntax:


SELECT COUNT(column_name)
FROM table_name
WHERE condition;


The AVG() function returns the average value of a numeric column. 

AVG() Syntax

SELECT AVG(column_name)
FROM table_name
WHERE condition;


The SUM() function returns the total sum of a numeric column. 

SUM() Syntax

SELECT SUM(column_name)
FROM table_name
WHERE condition;



3)COUNT() Example

The following SQL statement finds the number of products:

Example

SELECT COUNT(ProductID)
FROM Products;
Note: NULL values are not counted.

AVG() Example

The following SQL statement finds the average price of all products:

Example

SELECT AVG(Price)
FROM Products;
Note: NULL values are ignored.




SUM() Example
The following SQL statement finds the sum of the "Quantity" fields in the "OrderDetails" table:

Example
SELECT SUM(Quantity)
FROM OrderDetails;




Note : Null values are ignored in these operation





LIKE Operator	Description:

it is more likely that we should implement according to values :


WHERE CustomerName LIKE 'a%'	Finds any values that start with "a"
WHERE CustomerName LIKE '%a'	Finds any values that end with "a"
WHERE CustomerName LIKE '%or%'	Finds any values that have "or" in any position
WHERE CustomerName LIKE '_r%'	Finds any values that have "r" in the second position
WHERE CustomerName LIKE 'a_%'	Finds any values that start with "a" and are at least 2 characters in length
WHERE CustomerName LIKE 'a__%'	Finds any values that start with "a" and are at least 3 characters in length
WHERE ContactName LIKE 'a%o'	Finds any values that start with "a" and ends with "o"




The SQL LIKE Operator
The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.

There are two wildcards often used in conjunction with the LIKE operator:

 The percent sign (%) represents zero, one, or multiple characters
 The underscore sign (_) represents one, single character  

syntax:

SELECT column1, column2, ...
FROM table_name
WHERE columnN LIKE pattern;




3)
SQL Wildcard Characters
A wildcard character is used to substitute one or more characters in a string.

Wildcard characters are used with the LIKE operator. The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.

Wildcard Characters in MS Access

Symbol	Description	Example
*	Represents zero or more characters	                             bl* finds bl, black, blue, and blob
?	Represents a single character	                                            h?t finds hot, hat, and hit
[]	Represents any single character within the brackets	 h[oa]t finds hot and hat, but not hit
!	Represents any character not in the brackets	               h[!oa]t finds hit, but not hot and hat
-	Represents any single character within the specified range	c[a-b]t finds cat and cbt
#	Represents any single numeric character	                              2#5 finds 205, 215, 225, 235, 245, 255, 265, 275, 285, and 295






Wildcard Characters in SQL Server

Symbol	Description	Example
%	Represents zero or more characters	                         bl% finds bl, black, blue, and blob
_	Represents a single character                                     	h_t finds hot, hat, and hit
[]	Represents any single character within the brackets	h[oa]t finds hot and hat, but not hit
^	Represents any character not in the brackets	               h[^oa]t finds hit, but not hot and hat
-	Represents any single character within the specified range	c[a-b]t finds cat and cbt






4)
The SQL BETWEEN Operator
The BETWEEN operator selects values within a given range. The values can be numbers, text, or dates.

The BETWEEN operator is inclusive: begin and end values are included. 

BETWEEN Syntax

SELECT column_name(s)
FROM table_name
WHERE column_name BETWEEN value1 AND value2;




5)The SQL BETWEEN Operator

The BETWEEN operator selects values within a given range. The values can be numbers, text, or dates.

The BETWEEN operator is inclusive: begin and end values are included. 

BETWEEN Syntax
SELECT column_name(s)
FROM table_name
WHERE column_name BETWEEN value1 AND value2;


6)SQL Aliases
SQL aliases are used to give a table, or a column in a table, a temporary name.

Aliases are often used to make column names more readable.

An alias only exists for the duration of that query.

An alias is created with the AS keyword.

Alias Column Syntax
SELECT column_name AS alias_name
FROM table_name;
Alias Table Syntax
SELECT column_name(s)
FROM table_name AS alias_name;


SQL JOIN
A JOIN clause is used to combine rows from two or more tables, based on a related column between them.

Let's look at a selection from the "Orders" table:
OrderID	CustomerID	OrderDate
10308	                          2	              1996-09-18
10309	                            37	1996-09-19
10310	                            77	1996-09-20



then, look at a selection from the "Customers" table:

CustomerID	CustomerName      	     ContactName	              Country
1	           anderson                                        Anders	                               Germany
2	             Ana Trujillo E	                         Ana Trujillo            	Mexico
3	           Antonio Moreno Taquería	     Antonio Moreno	                 Mexico

Notice that the "CustomerID" column in the "Orders" table refers to the "CustomerID" in the "Customers" table. The relationship between the two tables above is the "CustomerID" column.

Then, we can create the following SQL statement (that contains an INNER JOIN), that selects records that have matching values in both tables:


this would draw an example 

SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate
FROM Orders
INNER JOIN Customers ON Orders.CustomerID=Customers.CustomerID;




OrderID  CustomerName	  OrderDate
10308	Ana Trujillo s	             9/18/1996
10365	Antonio Moreno 	11/27/1996
10383	Around the Horn	12/16/1996
10355	Around the Horn	11/15/1996
10278	Berglunds snabbköp







